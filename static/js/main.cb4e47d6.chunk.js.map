{"version":3,"sources":["services/api-service.js","components/main/movie-item/index.js","components/spinner/index.js","components/error-indicator/index.js","components/main/search-movie-list/index.js","components/main/rated-movie-list/index.js","components/main/navigation/index.js","components/main/tab-panel/index.js","components/main/index.js","components/app/index.js","index.js"],"names":["ApiService","_apiKey","_apiBase","fetch","this","res","ok","Error","status","json","requestGenresList","searchTerm","pageNumber","requestSearchList","requestGuestSession","movieId","guestId","requestBody","method","headers","body","JSON","stringify","response","result","requestRatedMovieList","Text","Typography","Title","MovieItem","props","poster","title","date","genresList","genreIds","overview","rateMovie","id","guestSessionId","voteAverage","genres","map","genresFilm","filter","item","currentGenre","code","key","name","image","className","FrownTwoTone","src","alt","styleColor","releaseDate","format","Date","style","width","height","level","borderColor","type","strong","allowHalf","count","fontSize","onChange","num","value","Component","Spinner","size","ErrorIndicator","SearchMovieList","searchMovies","loadMovieList","loadGenres","error","data","film","poster_path","original_title","release_date","genre_ids","vote_average","filmData","grid","gutter","column","dataSource","renderItem","Item","searchEmpty","description","content","spinner","errorMessage","RatedMovieList","ratedMovies","loadRatedList","RateMovie","Navigation","totalSearchResults","nextPage","totalRatedResults","currentTab","total","pageSize","page","TabPane","Tabs","Search","Input","TabPanel","defaultActiveKey","e","changeTab","tab","placeholder","changeSearch","target","Main","App","state","currentPage","ratedListIsEmpty","apiService","setState","onError","err","guestSession","getGuestId","then","session","guest_session_id","catch","getGenresList","list","searchList","getSearchList","results","total_results","ratedList","getRatedList","requestRateMovie","debounce","newPage","prevProps","prevState","div","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.cb4e47d6.chunk.js","sourcesContent":["export default class ApiService {\r\n  _apiKey = 'api_key=3b74691a96811eecae740c01bb3dfeb1';\r\n\r\n  _apiBase = 'https://api.themoviedb.org/3';\r\n\r\n  async requestGenresList() {\r\n    const res = await fetch(`${this._apiBase}/genre/movie/list?${this._apiKey}&language=en-US`);\r\n    if (!res.ok) {\r\n      throw new Error(`Could not fetch url, received ${res.status}`);\r\n    }\r\n    return await res.json();\r\n  }\r\n\r\n  getGenresList() {\r\n    const genresList = this.requestGenresList();\r\n    return genresList;\r\n  }\r\n\r\n  async requestSearchList(searchTerm, pageNumber) {\r\n    const res = await fetch(`${this._apiBase}/search/movie?${this._apiKey}&query=${searchTerm}&page=${pageNumber}`);\r\n    if (!res.ok) {\r\n      throw new Error(`Could not fetch url, received ${res.status}`);\r\n    }\r\n    return await res.json();\r\n  }\r\n\r\n  getSearchList(searchTerm, pageNumber) {\r\n    const filmList = this.requestSearchList(searchTerm, pageNumber);\r\n    return filmList;\r\n  }\r\n\r\n  async requestGuestSession() {\r\n    const res = await fetch(`${this._apiBase}/authentication/guest_session/new?${this._apiKey}`);\r\n    if (!res.ok) {\r\n      throw new Error(`Could not fetch url, received ${res.status}`);\r\n    }\r\n    return await res.json();\r\n  }\r\n\r\n  getGuestId() {\r\n    const guest = this.requestGuestSession();\r\n    return guest;\r\n  }\r\n\r\n  async requestRateMovie(movieId, guestId, requestBody) {\r\n    const response = await fetch(`${this._apiBase}/movie/${movieId}/rating?guest_session_id=${guestId}&${this._apiKey}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify(requestBody),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`Could not fetch url, received ${response.status}`);\r\n    }\r\n    const result = await response.json();\r\n    return result;\r\n  }\r\n\r\n  async requestRatedMovieList(guestId) {\r\n    const res = await fetch(`${this._apiBase}/guest_session/${guestId}/rated/movies?${this._apiKey}`);\r\n    if (!res.ok) {\r\n      throw new Error(`Could not fetch url, received ${res.status}`);\r\n    }\r\n    return await res.json();\r\n  }\r\n\r\n  getRatedList(guestId) {\r\n    const Rated = this.requestRatedMovieList(guestId);\r\n    return Rated;\r\n  }\r\n}","import React, { Component } from 'react';\r\nimport { Typography, Card, Rate } from 'antd';\r\nimport { format } from 'date-fns';\r\nimport { FrownTwoTone } from '@ant-design/icons';\r\nimport './movie-item.css';\r\n\r\nconst { Text, Title } = Typography;\r\n\r\nclass MovieItem extends Component {\r\n  render() {\r\n    const {\r\n      poster, title, date, genresList, genreIds, overview,\r\n      rateMovie, id, guestSessionId, voteAverage,\r\n    } = this.props;\r\n\r\n    const genres = genreIds.map((genresFilm) => {\r\n      const [currentGenre] = genresList.filter((item) => (\r\n        item.id === genresFilm));\r\n      return (<Text code key={currentGenre.id}>{currentGenre.name}</Text>);\r\n    });\r\n\r\n    let image = <div className='noImage'>\r\n                  <span>Изображение отсутствует</span>\r\n                  <FrownTwoTone/>\r\n                </div>;\r\n\r\n    if (poster) {\r\n      image = <img src={`http://image.tmdb.org/t/p/w185${poster}`} alt='poster'/>;\r\n    }\r\n    let styleColor = null;\r\n    if (voteAverage >= 7) {\r\n      styleColor = '#66e900';\r\n    } else if (voteAverage >= 5) {\r\n      styleColor = '#e9d100';\r\n    } else if (voteAverage >= 3) {\r\n      styleColor = '#e97e00';\r\n    } else {\r\n      styleColor = '#e90000';\r\n    }\r\n    const releaseDate = date ? format(new Date(date), 'MMMM d, yyyy') : null;\r\n\r\n    return (\r\n\r\n      <Card style={{\r\n        width: 451,\r\n        height: 279,\r\n      }}>\r\n        <div className='poster'>\r\n          {image}\r\n        </div>\r\n        <div className='description'>\r\n          <div className='title'>\r\n            <Title level={4}>{title}</Title>\r\n          </div>\r\n          <div className='vote-average' style={{ borderColor: styleColor }}>\r\n            <span>{voteAverage}</span>\r\n          </div>\r\n          <div className='date'>\r\n            <Text type=\"secondary\">{releaseDate}</Text>\r\n          </div>\r\n          <div className=\"genres\">\r\n            {genres}\r\n          </div>\r\n          <div className=\"overview\">\r\n            <Text strong>{overview}</Text>\r\n          </div>\r\n          <div className=\"rate\">\r\n            <Rate allowHalf count='10' style={{ fontSize: 14 }} onChange={(num) => {\r\n              const body = {\r\n                value: num,\r\n              };\r\n              rateMovie(id, guestSessionId, body);\r\n            }}/>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieItem;\r\n","import React from 'react';\r\nimport { Spin } from 'antd';\r\nimport './spinner.css';\r\n\r\nconst Spinner = () => (\r\n    <Spin size='large'/>\r\n);\r\n\r\nexport default Spinner;","import React from 'react';\r\nimport './error-indicator.css';\r\n\r\nconst ErrorIndicator = () => (\r\n    <div className='error-indicator'>\r\n      <span>ERROR</span>\r\n      <span>something went wrong</span>\r\n    </div>\r\n);\r\n\r\nexport default ErrorIndicator;","import React from 'react';\r\nimport { List, Empty } from 'antd';\r\nimport MovieItem from '../movie-item';\r\nimport Spinner from '../../spinner';\r\nimport ErrorIndicator from '../../error-indicator';\r\nimport './search-movie-list.css';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst SearchMovieList = (props) => {\r\n  const {\r\n    searchMovies, genres, loadMovieList, loadGenres, rateMovie, guestSessionId, error, searchTerm,\r\n  } = props;\r\n  const data = searchMovies.map((film) => ({\r\n    id: film.id,\r\n    poster: film.poster_path,\r\n    title: film.original_title,\r\n    overview: film.overview,\r\n    date: film.release_date,\r\n    genreIds: film.genre_ids,\r\n    voteAverage: film.vote_average,\r\n  }));\r\n\r\n  const filmData = <List\r\n                  grid={{ gutter: 20, column: 2 }}\r\n                  dataSource={data}\r\n                  renderItem={(item) => (\r\n                    <List.Item>\r\n                      <MovieItem key={item.id}\r\n                        voteAverage={item.voteAverage}\r\n                        poster={item.poster}\r\n                        title={item.title}\r\n                        date={item.date}\r\n                        overview={item.overview}\r\n                        genreIds={item.genreIds}\r\n                        id={item.id}\r\n                        genresList={genres}\r\n                        guestSessionId={guestSessionId}\r\n                        rateMovie={rateMovie}\r\n                        />\r\n                    </List.Item>\r\n                  )}\r\n                  />;\r\n\r\n  const searchEmpty = !searchTerm ? <Empty description='Введите название фильма'/> : null;\r\n  const hasData = loadMovieList && loadGenres && !error;\r\n  const content = hasData ? filmData : null;\r\n  const spinner = loadMovieList || error || searchEmpty ? null : <Spinner />;\r\n  const errorMessage = error ? <ErrorIndicator /> : null;\r\n  return (\r\n    <div className='movie-list'>\r\n      {searchEmpty}\r\n      {errorMessage}\r\n      {spinner}\r\n      {content}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchMovieList;","import React from 'react';\r\nimport { List } from 'antd';\r\nimport MovieItem from '../movie-item';\r\nimport Spinner from '../../spinner';\r\nimport './rated-movie-list.css';\r\nimport 'antd/dist/antd.css';\r\n\r\nconst RatedMovieList = (props) => {\r\n  const {\r\n    ratedMovies, genres, loadRatedList, rateMovie, guestSessionId,\r\n  } = props;\r\n  const data = ratedMovies.map((film) => ({\r\n    id: film.id,\r\n    poster: film.poster_path,\r\n    title: film.original_title,\r\n    overview: film.overview,\r\n    date: film.release_date,\r\n    genreIds: film.genre_ids,\r\n  }));\r\n\r\n  const filmData = <List\r\n                    grid={{ gutter: 20, column: 2 }}\r\n                    dataSource={data}\r\n                    renderItem={(item) => (\r\n                      <List.Item>\r\n                        <MovieItem key={item.id}\r\n                          poster={item.poster}\r\n                          title={item.title}\r\n                          date={item.date}\r\n                          overview={item.overview}\r\n                          genreIds={item.genreIds}\r\n                          id={item.id}\r\n                          genresList={genres}\r\n                          guestSessionId={guestSessionId}\r\n                          RateMovie={rateMovie}\r\n                          />\r\n                      </List.Item>\r\n                    )}\r\n                    />;\r\n\r\n  const spinner = !loadRatedList ? <Spinner /> : null;\r\n  const content = loadRatedList ? filmData : null;\r\n  return (\r\n    <div className='rated-list'>\r\n      {content}\r\n      {spinner}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default RatedMovieList;","import React from 'react';\r\nimport { Pagination } from 'antd';\r\nimport './pagination.css';\r\n\r\nconst Navigation = (props) => {\r\n  const {\r\n    totalSearchResults, totalRatedResults, nextPage, loadMovieList, currentTab,\r\n  } = props;\r\n\r\n  if (loadMovieList && totalSearchResults > 20 && currentTab === '1') {\r\n    return (\r\n      <Pagination\r\n        total={totalSearchResults}\r\n        pageSize='20'\r\n        onChange={(page) => { nextPage(page); }}\r\n      />\r\n    );\r\n  }\r\n  return null;\r\n};\r\nexport default Navigation;","import React from 'react';\r\nimport { Tabs, Input } from 'antd';\r\nimport SearchMovieList from '../search-movie-list';\r\nimport RatedMovieList from '../rated-movie-list';\r\nimport Navigation from '../navigation';\r\nimport './tab-panel.css';\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Search } = Input;\r\n\r\nconst TabPanel = (props) => (\r\n    <div className='tab-panel'>\r\n      <Tabs className=\"tabs\" defaultActiveKey=\"1\" onChange={(e) => {\r\n        props.changeTab(e);\r\n      }}>\r\n        <TabPane tab=\"Search\" key=\"1\">\r\n          <Search\r\n            className='search'\r\n            placeholder='Search movie'\r\n            onChange={(e) => (props.changeSearch(e.target.value))}\r\n          />\r\n          <SearchMovieList { ...props }/>\r\n        </TabPane>\r\n        <TabPane tab=\"Rated\" key=\"2\" >\r\n          <RatedMovieList { ...props}/>\r\n        </TabPane>\r\n      </Tabs>\r\n      <Navigation {...props} />\r\n    </div>\r\n);\r\n\r\nexport default TabPanel;","import React from 'react';\r\n\r\nimport './main.css';\r\nimport TabPanel from './tab-panel';\r\n\r\nconst Main = (props) => (\r\n    <main>\r\n      <TabPanel {...props}/>\r\n    </main>\r\n);\r\nexport default Main;","import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ApiService from '../../services/api-service';\r\nimport Main from '../main';\r\nimport { debounce } from '../../../node_modules/lodash';\r\nimport 'antd/dist/antd.css';\r\nimport './app.css';\r\n\r\nexport default class App extends Component {\r\n  static propTypes = {\r\n    genres: PropTypes.array,\r\n    searchMovies: PropTypes.array,\r\n    ratedMovies: PropTypes.array,\r\n\r\n    currentPage: PropTypes.string,\r\n    currentTab: PropTypes.string,\r\n    searchTerm: PropTypes.string,\r\n\r\n    totalSearchResults: PropTypes.number,\r\n    totalRatedResults: PropTypes.number,\r\n\r\n    loadGenres: PropTypes.bool,\r\n    loadMovieList: PropTypes.bool,\r\n    loadRatedList: PropTypes.bool,\r\n    ratedListIsEmpty: PropTypes.bool,\r\n    error: PropTypes.bool,\r\n  }\r\n\r\n  state = {\r\n    guestSessionId: null,\r\n    genres: [],\r\n    searchMovies: [],\r\n    ratedMovies: [],\r\n    searchTerm: '',\r\n    currentPage: '1',\r\n    currentTab: '1',\r\n    totalSearchResults: 0,\r\n    totalRatedResults: 0,\r\n    ratedListIsEmpty: true,\r\n    loadGenres: false,\r\n    loadMovieList: false,\r\n    loadRatedList: false,\r\n    error: false,\r\n  };\r\n\r\n  apiService = new ApiService();\r\n\r\n  componentDidMount() {\r\n    this.genres();\r\n    this.guestSession();\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.currentPage !== prevState.currentPage || this.state.searchTerm !== prevState.searchTerm) {\r\n      this.searchList(this.state.searchTerm, this.state.currentPage);\r\n    }\r\n  }\r\n\r\n  changeTab = (tab) => {\r\n    this.setState({\r\n      currentTab: tab,\r\n    });\r\n  }\r\n\r\n  onError = (err) => {\r\n    this.setState({\r\n      error: true,\r\n      loadMovieList: false,\r\n    });\r\n  }\r\n\r\n  guestSession = () => {\r\n    this.apiService\r\n      .getGuestId()\r\n      .then((session) => {\r\n        this.setState({\r\n          guestSessionId: session.guest_session_id,\r\n        });\r\n      })\r\n      .catch(this.onError);\r\n  }\r\n\r\n  genres = () => {\r\n    this.apiService\r\n      .getGenresList()\r\n      .then((list) => {\r\n        this.setState({\r\n          genres: [...list.genres],\r\n          loadGenres: true,\r\n        });\r\n      })\r\n      .catch(this.onError);\r\n  }\r\n\r\n  searchList = (searchTerm, pageNumber) => {\r\n    this.apiService\r\n      .getSearchList(searchTerm, pageNumber)\r\n      .then((list) => {\r\n        this.setState({\r\n          searchMovies: [...list.results],\r\n          totalSearchResults: list.total_results,\r\n          loadMovieList: true,\r\n        });\r\n      })\r\n      .catch(this.onError);\r\n  }\r\n\r\n  ratedList = (guestId) => {\r\n    this.apiService\r\n      .getRatedList(guestId)\r\n      .then((list) => {\r\n        // console.log(list);\r\n        if (list.total_results !== 0) {\r\n          this.setState({\r\n            ratedMovies: [...list.results],\r\n            totalRatedResults: list.total_results,\r\n            loadRatedList: true,\r\n          });\r\n        }\r\n      })\r\n      // .then(console.log(this.state.ratedMovies))\r\n      .catch(this.onError);\r\n  };\r\n\r\n  rateMovie = (movieId, guestId, requestBody) => {\r\n    this.apiService\r\n      .requestRateMovie(movieId, guestId, requestBody)\r\n      .then((list) => {\r\n        // console.log(`ratedFilm ${list.success}`);\r\n      })\r\n      .catch(this.onError);\r\n  }\r\n\r\n  changeSearch = debounce((e) => {\r\n    this.setState({\r\n      searchTerm: e,\r\n      currentPage: 1,\r\n    });\r\n  }, 1500);\r\n\r\n  nextPage = (newPage) => {\r\n    this.setState({\r\n      currentPage: newPage,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      guestSessionId, searchMovies, ratedMovies, searchTerm, genres, currentTab,\r\n      loadGenres, loadMovieList, loadRatedList, totalSearchResults, totalRatedResults, error,\r\n    } = this.state;\r\n    return (\r\n      <div className=\"container\">\r\n        <Main\r\n          changeSearch = {this.changeSearch}\r\n          rateMovie = {this.rateMovie}\r\n          ratedList = {this.ratedList}\r\n          nextPage = {this.nextPage}\r\n          changeTab = {this.changeTab}\r\n          guestSessionId={guestSessionId}\r\n          searchTerm={searchTerm}\r\n          error={error}\r\n          searchMovies={searchMovies}\r\n          ratedMovies={ratedMovies}\r\n          genres={genres}\r\n          loadGenres={loadGenres}\r\n          loadMovieList={loadMovieList}\r\n          loadRatedList={loadRatedList}\r\n          totalRatedResults={totalRatedResults}\r\n          totalSearchResults = {totalSearchResults}\r\n          currentTab={currentTab}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/app';\n\nconst div = document.getElementById('root');\nReactDOM.render(<App />, div);\n"],"sourceRoot":""}