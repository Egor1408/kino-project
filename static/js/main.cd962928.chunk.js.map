{"version":3,"sources":["containers/MovieItem/MovieItem.js","components/Navigation/Navigation.js","services/api-service.js","ErrorBoundary/ErrorBoundary.js","components/Spinner/Spinner.js","Context/Context.js","containers/SearchMovieList/SearchMovieList.js","containers/RatedMovieList/RatedMovieList.js","components/TabPanel/TabPanel.js","containers/App/App.js","index.js"],"names":["Text","Typography","Title","MovieItem","this","props","poster","title","date","genresList","genreIds","overview","rateMovie","filmId","guestId","voteAverage","rating","genres","map","genresFilm","filter","item","id","currentGenre","code","key","name","image","className","FrownTwoTone","src","alt","styleColor","releaseDate","format","Date","level","style","borderColor","type","strong","allowHalf","count","defaultValue","fontSize","onChange","num","value","Component","Navigation","totalMovieResults","nextPage","loadMovieList","total","pageSize","page","ApiService","_apiKey","_apiBase","fetch","res","ok","Error","status","json","requestGenresList","searchTerm","pageNumber","requestSearchList","requestGuestSession","movieId","requestBody","method","headers","body","JSON","stringify","response","result","requestRatedMovieList","ErrorBoundary","state","hasError","error","info","setState","children","Spinner","size","React","createContext","GenresProvider","Provider","GenresConsumer","Consumer","SearchMovieList","searchMovies","currentPage","apiService","searchList","getSearchList","then","list","results","total_results","catch","onError","newPage","prevProps","prevState","onRateClick","data","film","poster_path","original_title","release_date","genre_ids","vote_average","loadGenres","Fragment","grid","gutter","column","dataSource","renderItem","Item","description","RatedMovieList","ratedMovies","ratedList","getRatedList","TabPane","Tabs","Search","Input","TabPanel","changeSearch","defaultActiveKey","tab","placeholder","e","target","App","guestSessionId","currentRating","debounce","guestSession","getGuestId","session","guest_session_id","getGenresList","requestRateMovie","div","document","getElementById","ReactDOM","render"],"mappings":"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","file":"static/js/main.cd962928.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Typography, Card, Rate } from 'antd';\r\nimport { format } from 'date-fns';\r\nimport { FrownTwoTone } from '@ant-design/icons';\r\nimport './MovieItem.css';\r\n\r\nconst { Text, Title } = Typography;\r\n\r\nclass MovieItem extends Component {\r\n  render() {\r\n    const {\r\n      poster, title, date, genresList, genreIds, overview,\r\n      rateMovie, filmId, guestId, voteAverage, rating,\r\n    } = this.props;\r\n\r\n    const genres = genreIds.map((genresFilm) => {\r\n      const [currentGenre] = genresList.filter((item) => (\r\n        item.id === genresFilm));\r\n      return (<Text code key={currentGenre.id}>{currentGenre.name}</Text>);\r\n    });\r\n\r\n    let image = <div className='noImage'>\r\n                  <span>Изображение отсутствует</span>\r\n                  <FrownTwoTone/>\r\n                </div>;\r\n\r\n    if (poster) {\r\n      image = <img src={`http://image.tmdb.org/t/p/w185${poster}`} alt='poster'/>;\r\n    }\r\n    let styleColor = null;\r\n    if (voteAverage >= 7) {\r\n      styleColor = '#66e900';\r\n    } else if (voteAverage >= 5) {\r\n      styleColor = '#e9d100';\r\n    } else if (voteAverage >= 3) {\r\n      styleColor = '#e97e00';\r\n    } else {\r\n      styleColor = '#e90000';\r\n    }\r\n    const releaseDate = date ? format(new Date(date), 'MMMM d, yyyy') : null;\r\n    return (\r\n\r\n      <Card>\r\n        <div className='poster'>\r\n          {image}\r\n        </div>\r\n        <div className='description'>\r\n          <div className='title'>\r\n            <Title level={4}>{title}</Title>\r\n          </div>\r\n          <div className='vote-average' style={{ borderColor: styleColor }}>\r\n            <span>{voteAverage}</span>\r\n          </div>\r\n          <div className='date'>\r\n            <Text type=\"secondary\">{releaseDate}</Text>\r\n          </div>\r\n          <div className=\"genres\">\r\n            {genres}\r\n          </div>\r\n          <div className=\"overview\">\r\n            <Text strong>{overview}</Text>\r\n          </div>\r\n          <div className=\"rate\">\r\n            <Rate allowHalf count='10' defaultValue={rating} style={{ fontSize: 14 }} onChange={(num) => {\r\n              const body = {\r\n                value: num,\r\n              };\r\n              rateMovie(filmId, guestId, body);\r\n            }}/>\r\n          </div>\r\n        </div>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieItem;\r\n","import React from 'react';\r\nimport { Pagination } from 'antd';\r\nimport './Navigation.css';\r\n\r\nconst Navigation = (props) => {\r\n  const {\r\n    totalMovieResults, nextPage, loadMovieList,\r\n  } = props;\r\n\r\n  if (loadMovieList && totalMovieResults > 20) {\r\n    return (\r\n      <Pagination\r\n        total={totalMovieResults}\r\n        pageSize='20'\r\n        onChange={(page) => { nextPage(page); }}\r\n      />\r\n    );\r\n  }\r\n  return null;\r\n};\r\nexport default Navigation;","export default class ApiService {\r\n  _apiKey = 'api_key=3b74691a96811eecae740c01bb3dfeb1';\r\n\r\n  _apiBase = 'https://api.themoviedb.org/3';\r\n\r\n  async requestGenresList() {\r\n    const res = await fetch(`${this._apiBase}/genre/movie/list?${this._apiKey}&language=en-US`);\r\n    if (!res.ok) {\r\n      throw new Error(`Could not fetch url, received ${res.status}`);\r\n    }\r\n    return await res.json();\r\n  }\r\n\r\n  getGenresList() {\r\n    const genresList = this.requestGenresList();\r\n    return genresList;\r\n  }\r\n\r\n  async requestSearchList(searchTerm, pageNumber) {\r\n    const res = await fetch(`${this._apiBase}/search/movie?${this._apiKey}&query=${searchTerm}&page=${pageNumber}`);\r\n    if (!res.ok) {\r\n      throw new Error(`Could not fetch url, received ${res.status}`);\r\n    }\r\n    return await res.json();\r\n  }\r\n\r\n  getSearchList(searchTerm, pageNumber) {\r\n    const filmList = this.requestSearchList(searchTerm, pageNumber);\r\n    return filmList;\r\n  }\r\n\r\n  async requestGuestSession() {\r\n    const res = await fetch(`${this._apiBase}/authentication/guest_session/new?${this._apiKey}`);\r\n    if (!res.ok) {\r\n      throw new Error(`Could not fetch url, received ${res.status}`);\r\n    }\r\n    return await res.json();\r\n  }\r\n\r\n  getGuestId() {\r\n    const guest = this.requestGuestSession();\r\n    return guest;\r\n  }\r\n\r\n  async requestRateMovie(movieId, guestId, requestBody) {\r\n    const response = await fetch(`${this._apiBase}/movie/${movieId}/rating?guest_session_id=${guestId}&${this._apiKey}`, {\r\n      method: 'POST',\r\n      headers: {\r\n        'Content-Type': 'application/json;charset=utf-8',\r\n      },\r\n      body: JSON.stringify(requestBody),\r\n    });\r\n    if (!response.ok) {\r\n      throw new Error(`Could not fetch url, received ${response.status}`);\r\n    }\r\n    const result = await response.json();\r\n    return result;\r\n  }\r\n\r\n  async requestRatedMovieList(guestId) {\r\n    const res = await fetch(`${this._apiBase}/guest_session/${guestId}/rated/movies?${this._apiKey}`);\r\n    if (!res.ok) {\r\n      throw new Error(`Could not fetch url, received ${res.status}`);\r\n    }\r\n    return await res.json();\r\n  }\r\n\r\n  getRatedList(guestId) {\r\n    const Rated = this.requestRatedMovieList(guestId);\r\n    return Rated;\r\n  }\r\n}","import React, { Component } from 'react';\r\n\r\nexport default class ErrorBoundary extends Component {\r\n  state = {\r\n    hasError: false,\r\n  }\r\n\r\n  componentDidCatch(error, info) {\r\n    this.setState({ hasError: true });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return <h1>Something wrong</h1>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}","import React from 'react';\r\nimport { Spin } from 'antd';\r\n\r\nconst Spinner = () => (\r\n    <Spin size='large'/>\r\n);\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\nconst {\r\n  Provider: GenresProvider,\r\n  Consumer: GenresConsumer,\r\n} = React.createContext();\r\n\r\nexport { GenresProvider, GenresConsumer };","/* eslint-disable import/no-unresolved */\r\nimport React, { Component } from 'react';\r\nimport { List, Empty } from 'antd';\r\nimport MovieItem from '../MovieItem/MovieItem';\r\nimport Navigation from '../../components/Navigation/Navigation';\r\nimport ApiService from '../../services/api-service';\r\nimport ErrorBoundary from '../../ErrorBoundary/ErrorBoundary';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport { GenresConsumer } from '../../Context/Context';\r\nimport './SearchMovieList.css';\r\nimport 'antd/dist/antd.css';\r\n\r\nclass SearchMovieList extends Component {\r\n  state = {\r\n    searchMovies: [],\r\n    currentPage: '1',\r\n    totalMovieResults: 0,\r\n    loadMovieList: false,\r\n  };\r\n\r\n  apiService = new ApiService();\r\n\r\n  componentDidMount() {\r\n    // this.searchList(this.props.searchTerm, this.state.currentPage);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.state.currentPage !== prevState.currentPage\r\n      || (this.props.searchTerm !== prevProps.searchTerm && this.props.searchTerm !== '')\r\n      || this.props.onRateClick !== prevProps.onRateClick) {\r\n      this.searchList(this.props.searchTerm, this.state.currentPage);\r\n    }\r\n  }\r\n\r\n  searchList = (searchTerm, pageNumber) => {\r\n    this.apiService\r\n      .getSearchList(searchTerm, pageNumber)\r\n      .then((list) => {\r\n        this.setState({\r\n          searchMovies: [...list.results],\r\n          totalMovieResults: list.total_results,\r\n          loadMovieList: true,\r\n        });\r\n      })\r\n      .catch(this.onError);\r\n  }\r\n\r\n  nextPage = (newPage) => {\r\n    this.setState({\r\n      currentPage: newPage,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      searchMovies, loadMovieList,\r\n    } = this.state;\r\n    const data = searchMovies.map((film) => ({\r\n      id: film.id,\r\n      poster: film.poster_path,\r\n      rating: film.rating,\r\n      title: film.original_title,\r\n      overview: film.overview,\r\n      date: film.release_date,\r\n      genreIds: film.genre_ids,\r\n      voteAverage: film.vote_average,\r\n    }));\r\n    if (this.props.searchTerm\r\n      && loadMovieList\r\n      && this.props.loadGenres\r\n      && this.state.totalMovieResults !== 0) {\r\n      return (\r\n        <GenresConsumer>\r\n          {\r\n            (genres) => (\r\n                <React.Fragment>\r\n                  <div className='movie-list'>\r\n                    <List\r\n                      grid={{ gutter: 20, column: 2 }}\r\n                      dataSource={data}\r\n                      renderItem={(item) => (\r\n                        <List.Item>\r\n                          <ErrorBoundary key= {item.id}>\r\n                            <MovieItem\r\n                              filmId={item.id}\r\n                              poster={item.poster}\r\n                              title={item.title}\r\n                              date={item.date}\r\n                              overview={item.overview}\r\n                              genreIds={item.genreIds}\r\n                              voteAverage={item.voteAverage}\r\n                              genresList={genres}\r\n                              rating={item.rating}\r\n                              rateMovie={this.props.rateMovie}\r\n                              guestId={this.props.guestId}\r\n                            />\r\n                          </ErrorBoundary>\r\n                        </List.Item>\r\n                      )}\r\n                    />\r\n                  </div>\r\n                  <Navigation\r\n                    totalMovieResults={this.state.totalMovieResults}\r\n                    currentPage={this.state.currentPage}\r\n                    loadMovieList={this.state.loadMovieList}\r\n                    nextPage={this.nextPage}\r\n                  />\r\n                </React.Fragment>\r\n            )\r\n          }\r\n        </GenresConsumer>\r\n      );\r\n    }\r\n    if (!this.props.searchTerm) {\r\n      return <Empty description='Введите название фильма'/>;\r\n    }\r\n    if (!this.state.totalMovieResults && loadMovieList) {\r\n      return <Empty description='Поиск не дал результатов'/>;\r\n    }\r\n    return (<Spinner />);\r\n  }\r\n}\r\n\r\nexport default SearchMovieList;","/* eslint-disable import/no-unresolved */\r\nimport React, { Component } from 'react';\r\nimport { List, Empty } from 'antd';\r\nimport MovieItem from '../MovieItem/MovieItem';\r\nimport Navigation from '../../components/Navigation/Navigation';\r\nimport ErrorBoundary from '../../ErrorBoundary/ErrorBoundary';\r\nimport ApiService from '../../services/api-service';\r\nimport Spinner from '../../components/Spinner/Spinner';\r\nimport 'antd/dist/antd.css';\r\nimport './RatedMovieList.css';\r\n\r\nclass RatedMovieList extends Component {\r\n  state = {\r\n    ratedMovies: [],\r\n    currentPage: '1',\r\n    loadMovieList: false,\r\n    totalMovieResults: 0,\r\n  };\r\n\r\n  apiService = new ApiService();\r\n\r\n  componentDidMount() {\r\n    this.ratedList(this.props.guestId);\r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState) {\r\n    if (this.props.onRateClick !== prevProps.onRateClick) {\r\n      this.ratedList(this.props.guestId);\r\n    }\r\n  }\r\n\r\n  ratedList = (guestId) => {\r\n    this.apiService\r\n      .getRatedList(guestId)\r\n      .then((list) => {\r\n        this.setState({\r\n          ratedMovies: [...list.results],\r\n          totalMovieResults: list.total_results,\r\n          loadMovieList: true,\r\n        });\r\n      })\r\n      .catch(this.onError);\r\n  };\r\n\r\n  render() {\r\n    const {\r\n      ratedMovies, loadMovieList,\r\n    } = this.state;\r\n    const data = ratedMovies.map((film) => ({\r\n      id: film.id,\r\n      poster: film.poster_path,\r\n      rating: film.rating,\r\n      title: film.original_title,\r\n      overview: film.overview,\r\n      date: film.release_date,\r\n      genreIds: film.genre_ids,\r\n      voteAverage: film.vote_average,\r\n    }));\r\n\r\n    if (this.state.totalMovieResults === 0) {\r\n      return <Empty description=\"Вы еще не оценили ни одного фильма\"/>;\r\n    }\r\n    if (loadMovieList && this.props.loadGenres) {\r\n      return (\r\n        <React.Fragment>\r\n          <div className='MovieList'>\r\n            <List\r\n            grid={{ gutter: 20, column: 2 }}\r\n            dataSource={data}\r\n            renderItem={(item) => (\r\n              <List.Item>\r\n                <ErrorBoundary key={item.id}>\r\n                  <MovieItem\r\n                    filmId={item.id}\r\n                    poster={item.poster}\r\n                    title={item.title}\r\n                    date={item.date}\r\n                    overview={item.overview}\r\n                    genreIds={item.genreIds}\r\n                    voteAverage={item.voteAverage}\r\n                    genresList={this.props.genres}\r\n                    rating={item.rating}\r\n                    rateMovie={this.props.rateMovie}\r\n                    guestId={this.props.guestId}\r\n                  />\r\n                </ErrorBoundary>\r\n              </List.Item>\r\n            )}\r\n            />\r\n          </div>\r\n          <Navigation\r\n            totalMovieResults={this.state.totalMovieResults}\r\n            currentPage={this.state.currentPage}\r\n            loadMovieList={this.state.loadMovieList}\r\n            nextPage={this.nextPage}\r\n          />\r\n        </React.Fragment>\r\n      );\r\n    }\r\n    return (<Spinner />);\r\n  }\r\n}\r\n\r\nexport default RatedMovieList;","import React from 'react';\r\nimport { Tabs, Input } from 'antd';\r\nimport SearchMovieList from '../../containers/SearchMovieList/SearchMovieList';\r\nimport RatedMovieList from '../../containers/RatedMovieList/RatedMovieList';\r\nimport './TabPanel.css';\r\n\r\nconst { TabPane } = Tabs;\r\nconst { Search } = Input;\r\n\r\nconst TabPanel = (props) => {\r\n  const {\r\n    rateMovie, guestId, onRateClick, genres, loadGenres, searchTerm, changeSearch,\r\n  } = props;\r\n  return (\r\n    <div className='TabPanel'>\r\n      <Tabs className=\"tabs\" defaultActiveKey=\"1\">\r\n        <TabPane tab=\"Search\" key=\"1\">\r\n          <Search\r\n            className='search'\r\n            placeholder='Search movie'\r\n            onChange={(e) => (changeSearch(e.target.value))}\r\n          />\r\n          <SearchMovieList\r\n            rateMovie={rateMovie}\r\n            searchTerm={searchTerm}\r\n            guestId={guestId}\r\n            onRateClick={onRateClick}\r\n            genres={genres}\r\n            loadGenres={loadGenres}\r\n          />\r\n        </TabPane>\r\n        <TabPane tab=\"Rated\" key=\"2\" >\r\n          <RatedMovieList\r\n            rateMovie={rateMovie}\r\n            guestId={guestId}\r\n            onRateClick={onRateClick}\r\n            genres={genres}\r\n            loadGenres={loadGenres}\r\n          />\r\n        </TabPane>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default TabPanel;","import React, { Component } from 'react';\r\nimport TabPanel from '../../components/TabPanel/TabPanel';\r\nimport ApiService from '../../services/api-service';\r\nimport ErrorBoundary from '../../ErrorBoundary/ErrorBoundary';\r\nimport { GenresProvider } from '../../Context/Context';\r\nimport { debounce } from '../../../node_modules/lodash';\r\nimport 'antd/dist/antd.css';\r\nimport './App.css';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    genres: [],\r\n    loadGenres: false,\r\n    guestSessionId: null,\r\n    onRateClick: 0,\r\n    searchTerm: '',\r\n    currentRating: null,\r\n  }\r\n\r\n  apiService = new ApiService();\r\n\r\n  componentDidMount() {\r\n    this.guestSession();\r\n    this.genres();\r\n  }\r\n\r\n  changeSearch = debounce((e) => {\r\n    this.setState({\r\n      searchTerm: e,\r\n      currentPage: 1,\r\n    });\r\n  }, 1500);\r\n\r\n  guestSession = () => {\r\n    this.apiService\r\n      .getGuestId()\r\n      .then((session) => {\r\n        this.setState({\r\n          guestSessionId: session.guest_session_id,\r\n        });\r\n      })\r\n      .catch(this.onError);\r\n  }\r\n\r\n  genres = () => {\r\n    this.apiService\r\n      .getGenresList()\r\n      .then((list) => {\r\n        this.setState({\r\n          genres: [...list.genres],\r\n          loadGenres: true,\r\n        });\r\n      })\r\n      .catch(this.onError);\r\n  }\r\n\r\n  rateMovie = (movieId, guestId, requestBody) => {\r\n    this.apiService\r\n      .requestRateMovie(movieId, guestId, requestBody)\r\n      // eslint-disable-next-line no-return-assign\r\n      .then(this.setState((prevState) => ({ onRateClick: prevState.onRateClick += 1 })))\r\n      .catch(this.onError);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <GenresProvider value={this.state.genres}>\r\n        <ErrorBoundary>\r\n          <div className='wrapper'>\r\n            <TabPanel\r\n              rateMovie={this.rateMovie}\r\n              guestId={this.state.guestSessionId}\r\n              onRateClick={this.state.onRateClick}\r\n              genres={this.state.genres}\r\n              loadGenres={this.state.loadGenres}\r\n              changeSearch={this.changeSearch}\r\n              searchTerm={this.state.searchTerm}\r\n            />\r\n          </div>\r\n        </ErrorBoundary>\r\n      </GenresProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './containers/App/App';\r\n\r\nconst div = document.getElementById('root');\r\nReactDOM.render(<App />, div);\r\n"],"sourceRoot":""}